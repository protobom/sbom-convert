// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/protobom/sbom-convert/pkg/convert (interfaces: Writer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_writer.go -package=mocks github.com/protobom/sbom-convert/pkg/convert Writer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	sbom "github.com/protobom/protobom/pkg/sbom"
	gomock "go.uber.org/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// WriteStream mocks base method.
func (m *MockWriter) WriteStream(arg0 *sbom.Document, arg1 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStream indicates an expected call of WriteStream.
func (mr *MockWriterMockRecorder) WriteStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStream", reflect.TypeOf((*MockWriter)(nil).WriteStream), arg0, arg1)
}
